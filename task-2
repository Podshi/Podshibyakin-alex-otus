var fn1 = () => {
    console.log('fn1')
    return Promise.resolve(1)
    }
    
var fn2 = () => new Promise(resolve => {
    console.log('fn2')
    setTimeout(() => resolve(2), 1000)
    })

promiseReduce([fn1, fn2], (memo, value) => {
        console.log('reduce')
        return memo * value
        }, 1)
        .then(resolve => console.log(resolve))

function promiseReduce(asyncFunctions, reduce, initialValue) {
    return new Promise((resolve, reject) => 
    {             
        async function execute ()
        {
            for (f of asyncFunctions) await f().then(x => initialValue = reduce.call(promiseReduce, initialValue, x))
            resolve(initialValue) 
        }
        execute();
    })
}
